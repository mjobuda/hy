..
    DO NOT MODIFY THIS FILE. IT IS AUTO GENERATED BY ``conf.py``
    If you need to change or add methods, modify ``cheatsheet_spec`` in ``conf.py``

.. _cheatsheet:

Cheatsheet
==========

Hy
--

====== =========================
IO     | :hy:func:`repr <hy.repr>` \
         :hy:func:`repr-register <hy.repr-register>` \
         :hy:func:`mangle <hy.mangle>` \
         :hy:func:`unmangle <hy.unmangle>` \
         :hy:func:`read <hy.read>` \
         :hy:func:`read-str <hy.read-str>`
Reader | :hy:func:`eval <hy.eval>` \
         :hy:func:`gensym <hy.gensym>` \
         :hy:func:`macroexpand <hy.macroexpand>` \
         :hy:func:`macroexpand-1 <hy.macroexpand-1>` \
         :hy:func:`disassemble <hy.disassemble>` \
         :hy:func:`as-model <hy.as-model>`
====== =========================

Core
----

============= =========================
Meta          | :hy:func:`doc <hy.core.macros.doc>`
Macros        | :hy:func:`when <hy.core.macros.when>` \
                :hy:func:`cond <hy.core.macros.cond>`
Special Forms | :hy:func:`^ <^>` \
                :ref:`\. <dot>` \
                :hy:func:`annotate <annotate>` \
                :hy:func:`fn <fn>` \
                :hy:func:`fn/a <fn/a>` \
                :hy:func:`defn <defn>` \
                :hy:func:`defn/a <defn/a>` \
                :hy:func:`defmacro <defmacro>` \
                :hy:func:`if <if>` \
                :hy:func:`assert <assert>` \
                :hy:func:`get <get>` \
                :hy:func:`global <global>` \
                :hy:func:`import <import>` \
                :hy:func:`eval-and-compile <eval-and-compile>` \
                :hy:func:`eval-when-compile <eval-when-compile>` \
                :hy:func:`await <await>` \
                :hy:func:`break <break>` \
                :hy:func:`chainc <chainc>` \
                :hy:func:`continue <continue>` \
                :hy:func:`do <do>` \
                :hy:func:`for <for>` \
                :hy:func:`lfor <lfor>` \
                :hy:func:`dfor <dfor>` \
                :hy:func:`gfor <gfor>` \
                :hy:func:`sfor <sfor>` \
                :hy:func:`setv <setv>` \
                :hy:func:`setx <setx>` \
                :hy:func:`match <match>` \
                :hy:func:`defclass <defclass>` \
                :hy:func:`del <del>` \
                :hy:func:`nonlocal <nonlocal>` \
                :hy:func:`py <py>` \
                :hy:func:`pys <pys>` \
                :hy:func:`quasiquote <quasiquote>` \
                :hy:func:`quote <quote>` \
                :hy:func:`require <require>` \
                :hy:func:`return <return>` \
                :hy:func:`cut <cut>` \
                :hy:func:`raise <raise>` \
                :hy:func:`try <try>` \
                :hy:func:`unpack-iterable/unpack-mapping <unpack-iterable/unpack-mapping>` \
                :hy:func:`unquote <unquote>` \
                :hy:func:`unquote-splice <unquote-splice>` \
                :hy:func:`while <while>` \
                :hy:func:`with <with>` \
                :hy:func:`with/a <with/a>` \
                :hy:func:`with-decorator <with-decorator>` \
                :hy:func:`yield <yield>` \
                :hy:func:`yield-from <yield-from>`
Arithmetic    | :hy:func:`@ <hy.core.shadow.@>` \
                :hy:func:`% <hy.core.shadow.%>` \
                :hy:func:`+ <hy.core.shadow.+>` \
                :hy:func:`- <hy.core.shadow.->` \
                :hy:func:`* <hy.core.shadow.*>` \
                :hy:func:`** <hy.core.shadow.**>` \
                :hy:func:`/ <hy.core.shadow./>` \
                :hy:func:`// <hy.core.shadow.//>`
Comparison    | :hy:func:`cond <hy.core.macros.cond>` \
                :hy:func:`< <hy.core.shadow.<>` \
                :hy:func:`> <hy.core.shadow.>>` \
                :hy:func:`<= <hy.core.shadow.<=>` \
                :hy:func:`>= <hy.core.shadow.>=>` \
                :hy:func:`= <hy.core.shadow.=>` \
                :hy:func:`\!= <hy.core.shadow.\!=>` \
                :hy:func:`is <hy.core.shadow.is>` \
                :hy:func:`not? <hy.core.shadow.not?>` \
                :hy:func:`in <hy.core.shadow.in>` \
                :hy:func:`not-in <hy.core.shadow.not-in>`
Bitwise       | :hy:func:`\<\< <hy.core.shadow.\<\<>` \
                :hy:func:`>> <hy.core.shadow.>>>` \
                :hy:func:`& <hy.core.shadow.&>` \
                :hy:func:`| <hy.core.shadow.|>` \
                :hy:func:`^ <hy.core.shadow.^>` \
                :hy:func:`~ <hy.core.shadow.~>`
Logic         | :hy:func:`not <hy.core.shadow.not>` \
                :hy:func:`and <hy.core.shadow.and>` \
                :hy:func:`or <hy.core.shadow.or>`
============= =========================
